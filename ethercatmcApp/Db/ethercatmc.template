record(motor,"$(P)$(R)")
{
	field(DESC,"$(DESC=R)")
	field(CARD,"$(AXIS_NO=0)")
	field(DTYP,"asynMotor")
	field(DVAL,"$(DVAL=0)")
	field(DIR,"$(DIR=0)")
	field(VELO,"$(VELO=0)")
	field(JVEL,"$(JVEL=0)")
	field(VBAS,"$(VBAS=0)")
	field(ACCL,"$(ACCL=0)")
	field(JAR, "$(JAR=0)")
	field(BDST,"$(BDST=0)")
	field(DLY, "$(DLY=0)")
	field(BVEL,"$(BVEL=0)")
	field(BACC,"$(BACC=0)")
	field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))")
	field(MRES,"$(MRES=1)")
	field(ERES,"$(ERES=0)")
	field(PREC,"$(PREC=3)")
	field(EGU,"$(EGU=mm)")
	field(DHLM,"$(DHLM=0)")
	field(DLLM,"$(DLLM=0)")
	field(RDBD,"$(RDBD=0)")
	field(RTRY,"$(RTRY=1)")
	field(RMOD,"$(RMOD=3)")
	field(DLY,"$(DLY=0)")
	field(FOFF,"$(FOFF=0)")
	field(NTM,"0")
	field(TWV,"$(TWV=1)")
}

# The error text
record(stringin, "$(P)$(R)-ErrTxt") {
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(MOTOR_PORT),$(AXIS_NO))ErrTxt")
    field(SCAN, "I/O Intr")
}

# The message text
record(stringin, "$(P)$(R)-MsgTxt") {
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_MESSAGE_TEXT")
    field(SCAN, "I/O Intr")
}

# Debug message in IOC log
record(stringout, "$(P)$(R)-DbgStrToLOG") {
    field(DESC, "Log String in IOC log")
    field(VAL, "")
    field(DTYP, "asynOctetWrite")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))StrToLOG")
}

# These records make the motor resolution, offset and direction available to the driver
# which is needed for profile moves and other applications

# Motor direction for this axis
record(longout,"$(P)$(R)-DIR_") {
    field(DESC, "$(R) direction")
    field(DOL,  "$(P)$(R).DIR CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_REC_DIRECTION")
}

record(bi, "$(P)$(R)-Err")
{
    field(DESC, "$(R) Error from TwinCAT")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MCUErr")
    field(SCAN, "I/O Intr")
    field(ZNAM, "OK")
    field(ONAM, "ERROR")
    field(ZSV,  "NO_ALARM")
    field(OSV,  "MINOR")
}

record(ai, "$(P)$(R)-PosAct")
{
    field(DESC, "actual Pos")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_ENCODER_POSITION")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)-PosAct-TSE")
{
    field(DESC, "actual Pos MCU timestamped")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_ENCODER_POSITION")
    field(SCAN, "I/O Intr")
    field(TSE, -2)
}

record(ai, "$(P)$(R)-Vel-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))Vel-RB")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)-Acc-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))Acc-RB")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)-RawEncStep")
{
    field(DTYP, "asynInt32")
    field(DESC, "RawEncStep")
    field(EGU,  "steps")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))RawEncStep")
    field(ADEL, "$(RAWENCSTEP_ADEL=1)")
    field(MDEL, "$(RAWENCSTEP_MDEL=1)")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)-ErrId")
{
    field(DESC, "$(R) Error ID TwinCAT")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))ErrorId")
    field(SCAN, "I/O Intr")
}

record(longout,"$(P)$(R)-ErrRst") {
    field(DESC, "Error Reset")
    field(VAL,  0)
    field(DTYP, "asynInt32")
    field(PINI, "YES")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))ErrRst")
}

# Motor offset for this axis
record(ao,"$(P)$(R)-OFF_") {
    field(DESC, "$(R) offset")
    field(DOL,  "$(P)$(R).OFF CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_REC_OFFSET")
}


# Motor resolution for this axis
record(ao,"$(P)$(R)-MRES_") {
    field(DESC, "$(R) resolution")
    field(DOL,  "$(P)$(R).MRES CP MS")
    field(OMSL, "closed_loop")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(OUT,  "@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_REC_RESOLUTION")
}

record(ai,"$(P)$(R)-CfgSREV-RB") {
    field(DESC, "Micro Steps / Revolution")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgSREV-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgUREV-RB") {
    field(DESC, "EGU / Revolution")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgUREV-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgPMIN-RB") {
    field(DESC, "Absolute Minimum")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPMIN-RB")
    field(SCAN, "I/O Intr")
}
record(ai,"$(P)$(R)-CfgPMAX-RB") {
    field(DESC, "Absolute Maximum")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPMAX-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgSPDB-RB") {
    field(DESC, "Set point dead band window")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgSPDB-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgRDBD-RB") {
    field(DESC, "In target position window")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgRDBD-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgRDBD-Tim-RB") {
    field(DESC, "In target position time")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgRDBD-Tim-RB")
    field(SCAN, "I/O Intr")
}

record(longin,"$(P)$(R)-CfgRDBD-En-RB") {
    field(DESC, "In target position enabled")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgRDBD-En-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgPOSLAG-RB") {
    field(DESC, "In target position window")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPOSLAG-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgPOSLAG-Tim-RB") {
    field(DESC, "In target position time")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPOSLAG-Tim-RB")
    field(SCAN, "I/O Intr")
}

record(longin,"$(P)$(R)-CfgPOSLAG-En-RB") {
    field(DESC, "In target position enabled")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgPOSLAG-En-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgDHLM-RB") {
    field(DESC, "EC High Soft Limit RB")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDHLM-RB")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-CfgDLLM-RB") {
    field(DESC, "EC Low Soft Limit RB")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDLLM-RB")
    field(SCAN, "I/O Intr")
}

record(longin,"$(P)$(R)-CfgDHLM-En-RB") {
    field(DESC, "EC High Soft Limit enabled RB")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDHLM-En")
    field(SCAN, "I/O Intr")
}

record(longin,"$(P)$(R)-CfgDLLM-En-RB") {
    field(DESC, "EC Low Soft Limit enabled RB")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDLLM-En")
    field(SCAN, "I/O Intr")
}

# Config records, the values will be pushed into the motor record fields

record(ai, "$(P)$(R)-CfgVELO-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgVELO-RB")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)-CfgVMAX-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgVMAX-RB")
    field(SCAN, "I/O Intr")
}


record(ai, "$(P)$(R)-CfgJVEL-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgJVEL-RB")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)-CfgHVEL-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgHVEL-RB")
    field(SCAN, "I/O Intr")
}


record(ai, "$(P)$(R)-CfgACCS-RB")
{
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,  "@asyn($(MOTOR_PORT),$(AXIS_NO))CfgACCS-RB")
    field(SCAN, "I/O Intr")
}

record(longin,"$(P)$(R)-FoffVis") {
    field(DESC, "FOFF-Visible")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))FoffVis")
    field(SCAN, "I/O Intr")
}

record(longin,"$(P)$(R)-HomeVis") {
    field(DESC, "HOME-Visible")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))HomeVis")
    field(SCAN, "I/O Intr")
}

record(mbbi,"$(P)$(R)-HomProc-RB") {
    field(DESC,"Homing procedure")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))HomProc-RB")
    field(SCAN, "I/O Intr")
    field(ZRVL,  "0")
    field(ONVL,  "1")
    field(TWVL,  "2")
    field(THVL,  "3")
    field(FRVL,  "4")
    field(FVVL,  "5")
    field(SXVL,  "6")
    field(SVVL, "11")
    field(EIVL, "12")
    field(NIVL, "21")
    field(TEVL, "22")
    field(ELVL, "23")
    field(TVVL, "24")
    field(TTVL, "13")
    field(FTVL, "14")
    field(FFVL, "15")

    field(ZRST, "NotHomable")
    field(ONST, "LimBwd")
    field(TWST, "LimFwd")
    field(THST, "HSbwdfromLimBwd")
    field(FRST, "HSfwdfromLimFwd")
    field(FVST, "HomeProc5")
    field(SXST, "HomeProc6")
    field(SVST, "HSbwd")
    field(EIST, "HSfwd")
    field(NIST, "IndexNBwd")
    field(TEST, "IndexNFwd")
    field(ELST, "IndexNfromLimBwd")
    field(TVST, "IndexNfromLimFwd")
    field(TTST, "HomProc13")
    field(FTST, "Special")
    field(FFST, "ManSetPos")
}

record(ai,"$(P)$(R)-HomPos-RB") {
    field(DESC, "Home Position")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))HomPos-RB")
    field(SCAN, "I/O Intr")
}

record(mbbi,"$(P)$(R)-StatusCode") {
    field(DESC,"StatusCode")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))StatusCode")
    field(SCAN, "I/O Intr")
    field(ZRVL,  "0")
    field(ONVL,  "1")
    field(TWVL,  "2")
    field(THVL,  "3")
    field(FRVL,  "4")
    field(FVVL,  "5")
    field(SXVL,  "6")
    field(SVVL,  "7")
    field(EIVL,  "8")
    field(NIVL,  "9")
    field(TEVL, "10")
    field(ELVL, "11")
    field(TVVL, "12")
    field(TTVL, "13")
    field(FTVL, "14")
    field(FFVL, "15")

    field(ZRST, "RESET")
    field(ONST, "IDLE")
    field(TWST, "DISABLED")
    field(THST, "WARN")
    field(FRST, "ERR-4")
    field(FVST, "START")
    field(SXST, "BUSY")
    field(SVST, "STOP")
    field(EIST, "ERROR")
    field(NIST, "ERR-9")
    field(TEST, "ERR-A")
    field(ELST, "ERR-B")
    field(TVST, "ERR-C")
    field(TTST, "ERR-D")
    field(FTST, "ERR-E")
    field(FFST, "ERR-F")
}

record(longin,"$(P)$(R)-CnenVis") {
    field(DESC, "CNEN-Visible")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_STATUS_GAIN_SUPPORT")
    field(SCAN, "I/O Intr")
}

#Power handling
record(longout, "$(P)$(R)-PwrAuto")
{
    field(DESC, "power automatic on")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_POWER_AUTO_ONOFF")
    info(asyn:READBACK,"1")
}

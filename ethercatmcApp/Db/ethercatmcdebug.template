#Power handling
record(longout, "$(P)$(R)-PwrCNEN")
{
    field(DESC, "power on off via CNEN")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_STATUS_GAIN_SUPPORT")
    info(asyn:READBACK,"1")
}

record(ao, "$(P)$(R)-PwrOnDly")
{
    field(DESC, "power on delay")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_POWER_ON_DELAY")
    info(asyn:READBACK,"1")
}

record(ao, "$(P)$(R)-PwrOffDly")
{
    field(DESC, "power off delay")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_POWER_OFF_DELAY")
    info(asyn:READBACK,"1")
}

# Records that allow to talk to the model 3 driver
# behind the back of the motorRecord
record(ao, "$(P)$(R)-MoveAbs")
{
    field(DESC, "Move absolute")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_MOVE_ABS")
    info(asyn:READBACK,"1")
}

record(ao, "$(P)$(R)-MoveRel")
{
    field(DESC, "Move relative")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_MOVE_REL")
    info(asyn:READBACK,"1")
}

record(ao, "$(P)$(R)-MoveVel")
{
    field(DESC, "Move velocity")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_MOVE_VEL")
    info(asyn:READBACK,"1")
}

record(ao, "$(P)$(R)-ACCS")
{
    field(DESC, "Acc EGU/sec2")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_ACCEL")
    info(asyn:READBACK,"1")
}

record(ao, "$(P)$(R)-VELO")
{
    field(DESC, "Velocity")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_VELOCITY")
    info(asyn:READBACK,"1")
}


record(ao, "$(P)$(R)-Home")
{
    field(DESC, "Home")
    field(DTYP, "asynFloat64")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_HOME")
}

record(longout, "$(P)$(R)-Stop")
{
    field(DESC, "Stop")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_STOP_AXIS")
    info(asyn:READBACK,"1")
}

record(stringout, "$(P)$(R)-DbgStrToMCU") {
    field(DESC, "Send Debug String")
    field(VAL, "")
    field(DTYP, "asynOctetWrite")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))StrToMCU")
}

record(ao,"$(P)$(R)-CfgDHLM") {
    field(DESC, "EC High Soft Limit")
    field(VAL,  0.0)
    field(DTYP, "asynFloat64")
    field(PREC,"$(PREC)")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDHLM")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(ao,"$(P)$(R)-CfgDLLM") {
    field(DESC, "EC Low Soft Limit")
    field(VAL,  0.0)
    field(DTYP, "asynFloat64")
    field(PREC,"$(PREC)")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDLLM")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-CfgDHLM-En") {
    field(DESC, "EC High Soft Limit enable")
    field(VAL,  0)
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDHLM-En")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-CfgDLLM-En") {
    field(DESC, "EC Low Soft Limit enable")
    field(VAL,  0)
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))CfgDLLM-En")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-HomeOnLs") {
    field(DESC, "Allow HOMF on HLS, HOMR on LLS")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_HOME_ON_LS")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-LsRampDown") {
    field(DESC, "LS hit needs ramp down")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_LS_RAMP_DOWN")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-NoStopOnLs") {
    field(DESC, "Recoord does not stop on LS")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_NO_STOP_ON_LS")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(longout,"$(P)$(R)-RwSoftlimits") {
    field(DESC, "RW Soft Limits")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_RW_SOFT_LIMITS")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-DrvUseEGU") {
    field(DESC, "Record uses EGU")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_DRIVER_USES_EGU")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(bo,"$(P)$(R)-AdjAfterHomed") {
    field(DESC, "Adjust (out of soft limit) after homed")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_ADJ_AFTER_HOMED")
    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(longin,"$(P)$(R)-DrvUseEGU-RB") {
    field(DESC, "Record uses EGU")
    field(DTYP, "asynInt32")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_FLAGS_DRIVER_USES_EGU")
    field(SCAN, "I/O Intr")
}

# Help records, to read what the record sends to the model 3 driver
record(ai,"$(P)$(R)-M3RHLM") {
    field(DESC, "Driver High Soft Limit")
    field(DTYP, "asynFloat64")
    field(PREC,"$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_HIGH_LIMIT")
    field(SCAN, "I/O Intr")
}

record(ai,"$(P)$(R)-M3RLLM") {
    field(DESC, "Driver Low Soft Limit")
    field(DTYP, "asynFloat64")
    field(PREC,"$(PREC)")
    field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_LOW_LIMIT")
    field(SCAN, "I/O Intr")
}


# Help help records,to make M3HLM agree with the value send to the
# Model 3 driver (there may be a bug here ?)
# 
record(ao,"$(P)$(R)-M3RHLMo_") {
    field(DESC, "Driver High Soft Limit")
    field(DTYP, "asynFloat64")
    field(PREC,"$(PREC)")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_HIGH_LIMIT")
    info(asyn:READBACK,"1")
}
record(ao,"$(P)$(R)-M3RLLMo_") {
    field(DESC, "Driver Low Soft Limit")
    field(DTYP, "asynFloat64")
    field(PREC,"$(PREC)")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))MOTOR_LOW_LIMIT")
    info(asyn:READBACK,"1")
}

#
# HomProc as an output record. keep in sync with
# field(INP,"@asyn($(MOTOR_PORT),$(AXIS_NO))HomProc-RB")
#
record(mbbo,"$(P)$(R)-HomProc") {
    field(DESC,"Homing procedure")
    field(DTYP, "asynInt32")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))HomProc-RB")
    field(ZRVL,  "0")
    field(ONVL,  "1")
    field(TWVL,  "2")
    field(THVL,  "3")
    field(FRVL,  "4")
    field(FVVL,  "5")
    field(SXVL,  "6")
    field(SVVL, "11")
    field(EIVL, "12")
    field(NIVL, "21")
    field(TEVL, "22")
    field(ELVL, "23")
    field(TVVL, "24")
    field(TTVL, "13")
    field(FTVL, "14")
    field(FFVL, "15")

    field(ZRST, "NotHomable")
    field(ONST, "LimBwd")
    field(TWST, "LimFwd")
    field(THST, "HSfwdfromLimBwd")
    field(FRST, "HSbwdfromLimFwd")
    field(FVST, "HomeProc5")
    field(SXST, "HomeProc6")
    field(SVST, "HSbwd")
    field(EIST, "HSfwd")
    field(NIST, "IndexNBwd")
    field(TEST, "IndexNFwd")
    field(ELST, "IndexNfromLimBwd")
    field(TVST, "IndexNfromLimFwd")
    field(TTST, "HomProc13")
    field(FTST, "HomProc14")
    field(FFST, "ManSetPos")

    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}

record(ao,"$(P)$(R)-HomPos") {
    field(DESC, "Home Position")
    field(DTYP, "asynFloat64")
    field(PREC, "$(PREC)")
    field(OUT,"@asyn($(MOTOR_PORT),$(AXIS_NO))HomPos-RB")

    info(asyn:READBACK,"1")
    info(asyn:INITIAL_READBACK,"1")
}
